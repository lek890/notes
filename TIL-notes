## Mongo - shell commands

1. Find field 

db.collection(query, projection)

```
db.user_auth.find(
{email : "consumer_pepcogf_user@tfbnw.net"}, 
{_id: 1,newsletterPermission: 1})
.pretty()

```

2. update and return new field

db.collection.findOneAndUpdate(
filter,
update,
options
)

```
db.user_auth.findOneAndUpdate(
{email : "consumer_pepcogf_user@tfbnw.net"},
{$set : { newsletterPermission : false }}, 
{ 
projection : { newsletterPermission : 1}, 
returnNewDocument : true
}
)
```




 
## TIL

1. Renaming during destructuring makes the original variable undefined in es6.
 
2. Typescript - Generic usage reported as JSX Error

   Problem = const paramArray = <T>(param1: T, param2: T) => [param1, param2];
   Workaround = Use function expression instead

   const paramArray = function <T>() => {}
   cause : using generic for parameter declaration and jsx grammer make the 
   component ambigous to parse.

3. IE doesn't have promise support by default









## Flutter

1. Cannot connect to service protocol

For Android, Have you added internet permission in android manifest file?.

<uses-permission android:name="android.permission.INTERNET"/>
For iOS,

in Info.plist

<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>

2. Verbose for error

flutter run -v

3. to repair
flutter packages pub cache repair


## til app

1. how to programatically navigate to another page?

- with react route v4+ rendering the <Redirect to="/somewhere"> is a best practice
- export withRouter(component)
  getting the props
  using history.push('/somewhere')
also works. but its old fashion now

2. Programatically navigating - url changes but not view?

- 'exact' keyword needs to be added to the path in the router switch.

3. programatically navigating - refesh says page not found 

- webpack historyApiFallback: true fixes it.
good read = https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually

4. rendering a div to the center using flex

parent - display flex; and height 100%
child - display: iniline-flex, margin : auto

5. webpack hot reloading
in webpack config
```
output: {
    path: path.join(__dirname, "dist"),
    publicPath: "/dist/"
  },
```

5. configuring webpack config

can be splitted to 3 - common, dev and prod and can be merged with webpack merge plugin and node script commands can be configured to use applicable config files using cli parameters.

6. generating index.html with the bundles attached to it in dist folder?

`HTMLWebpackPlugin` can be used. which will generate a index html and add the generated script bundle to it.

CleanWebpackPlugin for cleanup

7.nginx get part after url 

```
location ~* ^/api/(.+)$ {
      proxy_pass      http://192.168.0.108:8080/$1;
    }
```

8. docker run nginx latest

docker run  -v /Users/lekshmi-c.sheela/Downloads/Projects/personal/today-i-learned/nginx/:/etc/nginx:ro  -p 5000:80 --name til-nginx nginx:latest

9. fetch - to set cookies 

```credentials: "include",```

10. fetch boilerplate

```
fetch(`${BACKEND_URL}${SIGNIN}`, {
      method: "POST",
      body: JSON.stringify({
        username,
        password
      }),
      credentials: "include",
      headers: {
        "Content-Type": "application/json"
      }
    })
```

11. webpack - to access site from ip rather than localhost

``` --host 0.0.0.0 ```

12. express - serve static files - boilerplate

```
var path = require("path");
var express = require("express");

const PORT = 9000;
const DIST_DIR = path.join(__dirname, "dist");
var app = express();
app.use(express.static(DIST_DIR));

app.get("*", (req, res) => {
  res.sendFile(path.join(DIST_DIR, "index.html"));
});

app.listen(PORT);
```

13. webpack - give env variable for process

```

plugins: [
    new webpack.DefinePlugin({
      "process.env": {
        BACKEND_URL: JSON.stringify("http://localhost:5000/api")
      }
    })
  ]
```

for non process 

```
plugins: [
    new webpack.DefinePlugin({
        BACKEND_URL: JSON.stringify("http://localhost:5000/api")
    })
  ]
```

14. to use bit components using yarn

- yarn config set "@bit:registry" "https://node.bit.dev/"
- yarn add <@bit/react-bootstrap.react-bootstrap.na>
- import Nav from "@bit/react-bootstrap.react-bootstrap.nav"; in component
- for typings, add declare module "@bit/react-bootstrap.react-bootstrap.nav"; in types/index.d.ts

15. vscode

Copy content between tags including tag - emmet outward
Copy content between tags excluding tag - emmet inward

16. Production build rendering > Syntax error :unexpected token <

the index html has ```<script type="text/javascript" src="/dist/main.js">```
and when main.js is requested html file is served. so parsing failed.

to fix it make the public path in webpack config to be '/'.

now ```<script type="text/javascript" src="/main.js">``` is generated and will work properly.

## React

Mutations, Subscriptions, timers, logging and other side effects are not allowed inside the main body of a function component (called the render phase). Doing so will lead to confusion and inconsistencies in the UI.

Memoisation is the main performance optimization in react. memo does shallow comparison and if references are the same, rendering is skipped.

Don’t use mutable variables inside render function, use useRef instead.

If what you save in useRef has smaller lifecycle than the component itself, don’t forget to unset the value when disposing the resource.

Memoize functions and objects when needed to improve performance.

Correctly capture input dependencies (undefined => every render, [a, b] => when a or b change, [] => only once).

Use customs hooks for non-trivial use-cases.

Prefer useReducer or functional updates for useState to prevent reading and writing same value in a hook.


Green hooks

- useReducer
- useContext
- useState

Yellow hooks

- useCallback
- useMemo

Red hooks

- useRef
- useEffect
- useLayoutEffect

useMemo is useful for expensive calculations, useCallback is useful for passing callbacks needed for optimized child components.

##BehaviourSubject.getValue()

A Subject or Observable doesn't have a current value. When a value is emitted, it is passed to subscribers and the Observable is done with it.

If you want to have a current value, use BehaviorSubject which is designed for exactly that purpose. BehaviorSubject keeps the last emitted value and emits it immediately to new subscribers.

It also has a method getValue() to get the current value.

## boilerplate app-name
function boilerplate() { git clone https://github.com/lek890/react-typescript-webpack-boilerplate.git; mv react-typescript-webpack-boilerplate $1; cd $1; yarn; yarn start;}

## Markup

```
    [link](#toSomewhere)
    ###<a name="somewhere">A heading

  or anchor can be used
    ###<a href="#somewhere">A heading

```

1. Object.entries => gives each entry of object as an array.
2. to update a key in an object using a variable 

obj = {[variable]: value}

3. to import default export using alias

import {default as something} from somewhere






//todo:

memoisation
layouteffect
https://medium.com/@sdolidze/react-hooks-memoization-99a9a91c8853

yarn lock, package json lock and stuff
typescript handbook


https://www.pluralsight.com/guides/using-react-refs-typescript
https://stackoverflow.com/questions/57750777/generics-error-with-forwardref-property-ref-does-not-exist-on-type-intrinsic

eslint-plugin-react-hooks

build a slider
